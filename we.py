import streamlit as st
import pandas as pd
import re
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

st.title("üéì G·ª£i √Ω m√¥n h·ªçc v√† t√†i li·ªáu h·ªçc t·∫≠p")

# Load d·ªØ li·ªáu ph·∫£n h·ªìi sinh vi√™n
@st.cache_data
def load_data():
    df = pd.read_csv("course_reviews_5k_final.csv")
    df["N·ªôi dung ph·∫£n h·ªìi chu·∫©n h√≥a"] = df["N·ªôi dung ph·∫£n h·ªìi"].str.lower().str.replace(r"[^a-zA-Z√Ä-·ªπ\s]", "", regex=True)
    return df

df = load_data()

# G·ªôp vƒÉn b·∫£n ph·∫£n h·ªìi theo m√¥n h·ªçc
merged_texts_by_course = df.groupby("T√™n m√¥n h·ªçc")["N·ªôi dung ph·∫£n h·ªìi chu·∫©n h√≥a"].apply(lambda texts: " ".join(texts)).to_dict()
course_list = list(merged_texts_by_course.keys())
course_documents = [merged_texts_by_course[c] for c in course_list]

# TF-IDF v√† Cosine Similarity
tfidf = TfidfVectorizer()
course_vectors = tfidf.fit_transform(course_documents)
similarity_df = pd.DataFrame(cosine_similarity(course_vectors), index=course_list, columns=course_list)

# ƒê·ªô kh√≥ trung b√¨nh ch√≠nh x√°c
difficulty_scores = df.groupby("T√™n m√¥n h·ªçc").apply(
    lambda g: round((g["S·ªë sao"] * g["T·ªïng l∆∞·ª£t ƒë√°nh gi√°"]).sum() / g["T·ªïng l∆∞·ª£t ƒë√°nh gi√°"].sum(), 1)
).to_dict()

# T√†i li·ªáu h·ªçc t·∫≠p theo chuy√™n ng√†nh
resources = {
    "AI": ["Deep Learning Specialization - Coursera", "FastAI Practical Course", "AI for Everyone - Andrew Ng"],
    "ML": ["Machine Learning - Stanford", "Hands-On ML with Scikit-Learn", "ML Crash Course - Google"],
    "Signals": ["Signals & Systems - MIT", "Digital Signal Processing - Coursera"],
    "Networks": ["Computer Networking - Stanford", "Cisco CCNA"],
    "Embedded": ["Embedded Systems - Coursera", "Arduino for Beginners"],
    "Programming": ["Python for Everybody", "C++ for Programmers"],
    "Database": ["Intro to SQL - Khan Academy", "Database Design - Coursera"],
    "Math": ["Calculus - Khan Academy", "Linear Algebra - MIT"]
}

def get_resources(course_name):
    name = course_name.lower()
    if "ai" in name:
        return resources["AI"]
    elif "machine learning" in name or "h·ªçc m√°y" in name:
        return resources["ML"]
    elif "t√≠n hi·ªáu" in name:
        return resources["Signals"]
    elif "m·∫°ng" in name:
        return resources["Networks"]
    elif "nh√∫ng" in name:
        return resources["Embedded"]
    elif "l·∫≠p tr√¨nh" in name or "python" in name or "c++" in name:
        return resources["Programming"]
    elif "c∆° s·ªü d·ªØ li·ªáu" in name:
        return resources["Database"]
    elif "to√°n" in name or "x√°c su·∫•t" in name:
        return resources["Math"]
    else:
        return ["Ch∆∞a c√≥ g·ª£i √Ω c·ª• th·ªÉ"]

def suggest_related(course_name, top_n=3):
    if course_name not in similarity_df:
        return []
    sim_scores = similarity_df[course_name].sort_values(ascending=False)[1:top_n+1]
    return [(idx, round(score, 2)) for idx, score in sim_scores.items()]

# Giao di·ªán ch·ªçn m√¥n h·ªçc
selected_course = st.selectbox("Ch·ªçn m√¥n h·ªçc b·∫°n mu·ªën t√¨m hi·ªÉu", sorted(course_list))

if selected_course:
    st.markdown("---")
    st.subheader(f"üìä ƒê·ªô kh√≥ trung b√¨nh c·ªßa {selected_course}:")
    st.write(f"{difficulty_scores.get(selected_course, 'Kh√¥ng c√≥ d·ªØ li·ªáu')} ‚≠ê")

    st.subheader("üîó M√¥n h·ªçc li√™n quan")
    for related, score in suggest_related(selected_course):
        st.write(f"- {related} (similarity: {score})")

    st.subheader("üìö T√†i li·ªáu h·ªçc t·∫≠p g·ª£i √Ω")
    for r in get_resources(selected_course):
        st.write("-", r)
